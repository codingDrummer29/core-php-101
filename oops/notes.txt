SOURCE: https://www.w3schools.com/php/php_oop_what_is.asp

The "Don't Repeat Yourself" (DRY) principle is about reducing the repetition of code. You should 
extract out the codes that are common for the application, and place them at a single place and 
reuse them instead of repeating it.


basics::
#   A class is defined by using the class keyword, followed by the name of the class and a pair 
    of curly braces ({}). All its properties and methods go inside the braces
    In a class, variables are called properties and functions are called methods

#   We can create multiple objects from a class. Each object has all the properties and methods 
    defined in the class, but they will have different property values.
    Objects of a class is created using the new keyword.

#   The $this keyword refers to the current object, and is only available inside methods.

#   the instanceof keyword to check if an object belongs to a specific class.
    returns boolean value.


PHP - The __construct Function::
#   A constructor allows you to initialize an object's properties upon creation of the object.

#   If you create a __construct() function, PHP will automatically call this function when you 
    create an object from a class.

#   Notice that the construct function starts with two underscores (__)


PHP - The __destruct Function::
#   A destructor is called when the object is destructed or the script is stopped or exited.

#   If you create a __destruct() function, PHP will automatically call this function at the end 
    of the script.

#   Notice that the destruct function starts with two underscores (__)
REVIEW: As constructors and destructors helps reducing the amount of code, they are very useful


PHP - Access Modifiers::
Properties and methods can have access modifiers which control where they can be accessed.

There are three access modifiers:
#   public - the property or method can be accessed from everywhere. This is default
#   protected - the property or method can be accessed within the class and by classes derived 
    from that class
#   private - the property or method can ONLY be accessed within the class


PHP - Inheritance::
#   Inheritance in OOP = When a class derives from another class.

#   The child class will inherit all the public and protected properties and methods from the parent 
    class. In addition, it can have its own properties and methods.

#   An inherited class is defined by using the extends keyword


PHP - Inheritance and the Protected Access Modifier::
protected properties or methods can be accessed within the class and by classes derived from that class.
for explanation go through the codes.


PHP - Overriding Inherited Methods::
Inherited methods can be overridden by redefining the methods (use the same name) in the child class.


PHP - The final Keyword
The final keyword can be used to prevent class inheritance or to prevent method overriding.
    final class Fruit {
        ...
    }

    // will result in error
    class Strawberry extends Fruit {
        ...
    }
or,
    class Fruit {
        final public function intro() {
            ...
        }
    }

    class Strawberry extends Fruit {
    // will result in error
        public function intro() {
            ...
        }
    }


PHP - Class Constants::
#   Constants cannot be changed once it is declared.

#   Class constants can be useful if you need to define some constant data within a class.

#   A class constant is declared inside a class with the const keyword.

#   Class constants are case-sensitive. However, it is recommended to name the constants in all uppercase 
    letters.

#   We can access a constant from outside the class by using the class name followed by the scope resolution 
    operator (::) followed by the constant name

#   we can access a constant from inside the class by using the self keyword followed by the scope resolution 
    operator (::) followed by the constant name


PHP - Abstract Classes::
#   Abstract classes and methods are when the parent class has a named method, but need its child class(es) 
    to fill out the tasks.

#   An abstract class is a class that contains at least one abstract method. An abstract method is a method 
    that is declared, but not implemented in the code.

#   An abstract class or method is defined with the abstract keyword
EX:
    abstract class ParentClass {
        abstract public function someMethod1();
        abstract public function someMethod2($name, $color);
        abstract public function someMethod3() : string;
    }

When inheriting from an abstract class, the child class method must be defined with the same name, and the 
same or a less restricted access modifier. So, if the abstract method is defined as protected, the child class 
method must be defined as either protected or public, but not private. Also, the type and number of required 
arguments must be the same. However, the child classes may have optional arguments in addition.

when a child class is inherited from an abstract class, we have the following rules:
#   The child class method must be defined with the same name and it redeclares the parent abstract method
#   The child class method must be defined with the same or a less restricted access modifier
#   The number of required arguments must be the same. However, the child class may have optional arguments 
    in addition


PHP - Interfaces::
#   Interfaces allow you to specify what methods a class should implement.

#   Interfaces make it easy to use a variety of different classes in the same way. When one or more classes 
    use the same interface, it is referred to as "polymorphism".

#   Interfaces are declared with the interface keyword
EX:
    interface InterfaceName {
        public function someMethod1();
        public function someMethod2($name, $color);
        public function someMethod3() : string;
    }


PHP - Interfaces vs. Abstract Classes::
Interface are similar to abstract classes. The difference between interfaces and abstract classes are:
#   Interfaces cannot have properties, while abstract classes can
#   All interface methods must be public, while abstract class methods is public or protected
#   All methods in an interface are abstract, so they cannot be implemented in code and the abstract keyword 
    is not necessary
#   Classes can implement an interface while inheriting from another class at the same time


PHP - Using Interfaces::
#   To implement an interface, a class must use the implements keyword.
#   A class that implements an interface must implement all of the interface's methods.


PHP - Traits::
PHP only supports single inheritance: a child class can inherit only from one single parent.
So, what if a class needs to inherit multiple behaviors? OOP traits solve this problem.

Traits are used to declare methods that can be used in multiple classes. Traits can have methods and abstract 
methods that can be used in multiple classes, and the methods can have any access modifier (public, private, 
or protected).
Traits are declared with the trait keyword.
EX:
    trait TraitName {
        ...
    }
To use a trait in a class, use the use keyword:
    class MyClass {
        use TraitName;
    }


PHP - Static Methods::
SOURCE: https://www.w3schools.com/php/php_oop_static_methods.asp
#   Static methods can be called directly - without creating an instance of the class first.
#   Static methods are declared with the static keyword
#   To access a static method use the class name, double colon (::), and the method name
        ClassName::staticMethod();
#   A class can have both static and non-static methods. A static method can be accessed from a method 
    in the same class using the self keyword and double colon (::).
        self::welcome();
#   Static methods can also be called from methods in other classes. To do this, the static method should 
    be public.
#   To call a static method from a child class, use the parent keyword inside the child class. Here, the 
    static method can be public or protected.


PHP - Static Properties:: 
(same as static methods)
SOURCE: https://www.w3schools.com/php/php_oop_static_properties.asp


PHP Namespaces::
Namespaces are qualifiers that solve two different problems:

They allow for better organization by grouping classes that work together to perform a task
1.  They allow the same name to be used for more than one class
2.  For example, you may have a set of classes which describe an HTML table, such as Table, Row and Cell while 
    also having another set of classes to describe furniture, such as Table, Chair and Bed. Namespaces can be 
    used to organize the classes into two different groups while also preventing the two classes Table and 
    Table from being mixed up.

Namespaces are declared at the beginning of a file using the namespace keyword:
    namespace Html;
any code like Constants, classes and functions declared in this file, under this declaration will belong to 
Html namespace.

NOTE: A namespace declaration must be the first thing in the PHP file.
SOURCE: https://www.w3schools.com/php/php_namespaces.asp

we can also have nested namespace:
    namespace Code\Html;

Using Namespaces
    Any code that follows a namespace declaration is operating inside the namespace, so classes that belong 
    to the namespace can be instantiated without any qualifiers. To access classes from outside a namespace, 
    the class needs to have the namespace attached to it.
        $table = new Html\Table()
        $row = new Html\Row();
    When many classes from the same namespace are being used at the same time, it is easier to use the namespace 
    keyword:
        namespace Html;
        $table = new Table();
        $row = new Row();

Namespace Alias
    It can be useful to give a namespace or class an alias to make it easier to write. This is done with the 
    use keyword:
        use Html as H;
        $table = new H\Table();


PHP Iterables::
An iterable is any value which can be looped through with a foreach() loop.
The iterable pseudo-type was introduced in PHP 7.1, and it can be used as a data type for function arguments 
and function return values.

PHP - Creating Iterables:
Arrays->
    All arrays are iterables, so any array can be used as an argument of a function that requires an iterable.

Iterators->

    Any object that implements the Iterator interface can be used as an argument of a function that requires 
    an iterable.

    An iterator contains a list of items and provides methods to loop through them. It keeps a pointer to one 
    of the elements in the list. Each item in the list should have a key which can be used to find the item.

    An iterator must have these methods:

    #   current() - Returns the element that the pointer is currently pointing to. It can be any data type
    #   key() - Returns the key associated with the current element in the list. It can only be an integer, 
        float, boolean or string
    #   next() - Moves the pointer to the next element in the list
    #   rewind() - Moves the pointer to the first element in the list
    #   valid() - If the internal pointer is not pointing to any element (for example, if next() was called at 
        the end of the list), this should return false. It returns true in any other case