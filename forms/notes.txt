Both GET and POST create an array (e.g. array( key1 => value1, key2 => value2, key3 => value3, ...)). 
This array holds key/value pairs, where keys are the names of the form controls and values are the input 
data from the user.

Both GET and POST are treated as $_GET and $_POST. These are superglobals, which means that they are always 
accessible, regardless of scope - and you can access them from any function, class or file without having to 
do anything special.

$_GET is an array of variables passed to the current script via the URL parameters.

$_POST is an array of variables passed to the current script via the HTTP POST method.



Q.  When to use GET?

A.  Information sent from a form with the GET method is visible to everyone (all variable names and values are 
    displayed in the URL). GET also has limits on the amount of information to send. The limitation is about 
    2000 characters. However, because the variables are displayed in the URL, it is possible to bookmark the page. 
    This can be useful in some cases.

    GET may be used for sending non-sensitive data.

    Note: GET should NEVER be used for sending passwords or other sensitive information!



Q.  When to use POST?

A.  Information sent from a form with the POST method is invisible to others (all names/values are embedded within 
    the body of the HTTP request) and has no limits on the amount of information to send.

    Moreover POST supports advanced functionality such as support for multi-part binary input while uploading 
    files to server.

    However, because the variables are not displayed in the URL, it is not possible to bookmark the page.

    Developers prefer POST for sending form data.



Think SECURITY when processing PHP forms!
Proper validation of form data is important to protect your form from hackers and spammers!
SOURCE: https://www.w3schools.com/php/php_form_validation.asp



##### Big Note on PHP Form Security #####
The $_SERVER["PHP_SELF"] variable can be used by hackers!

If PHP_SELF is used in your page then a user can enter a slash (/) and then some Cross Site Scripting (XSS) 
commands to execute.
Cross-site scripting (XSS) is a type of computer security vulnerability typically found in Web applications. 
XSS enables attackers to inject client-side script into Web pages viewed by other users.

Assume we have the following form in a page named "formValid.php":
    <form method="post" action="<?php echo $_SERVER["PHP_SELF"];?>">

Now, if a user enters the normal URL in the address bar like "http://www.example.com/test_form.php", 
the above code will be translated to:
    <form method="post" action="test_form.php">
So far, so good.

However, consider that a user enters the following URL in the address bar:

http://www.example.com/test_form.php/%22%3E%3Cscript%3Ealert('hacked')%3C/script%3E
In this case, the above code will be translated to:
    <form method="post" action="test_form.php/"><script>alert('hacked')</script>

This code adds a script tag and an alert command. And when the page loads, the JavaScript code will be executed 
(the user will see an alert box). This is just a simple and harmless example how the PHP_SELF variable can be 
exploited.

Be aware of that any JavaScript code can be added inside the <script> tag! A hacker can redirect the user to a 
file on another server, and that file can hold malicious code that can alter the global variables or submit the 
form to another address to save the user data, for example.



####### Validate Form Data With PHP #######
The first thing we will do is to pass all variables through PHP's htmlspecialchars() function.

When we use the htmlspecialchars() function; then if a user tries to submit the following in a text field:

<script>location.href('http://www.hacked.com')</script>

- this would not be executed, because it would be saved as HTML escaped code, like this:

&lt;script&gt;location.href('http://www.hacked.com')&lt;/script&gt;

The code is now safe to be displayed on a page or inside an e-mail.

We will also do two more things when the user submits the form:

1.  Strip unnecessary characters (extra space, tab, newline) from the user input data (with the PHP trim() function)
2.  Remove backslashes (\) from the user input data (with the PHP stripslashes() function)
3.  The next step is to create a function that will do all the checking for us (which is much more convenient than 
    writing the same code over and over again).

We will name the function test_input().

for the rest, follow the file, form_valid.php