Have the PHP+MySQL setup for the system first

PHP 5 and later can work with a MySQL database using:
#   MySQLi extension (the "i" stands for improved)
#   PDO (PHP Data Objects)
Earlier versions of PHP used the MySQL extension. However, this extension was deprecated in 2012.


MySQLi or PDO::
"Whatever you like"
PDO will work on 12 different database systems, whereas MySQLi will only work with MySQL databases.

So, if you have to switch your project to use another database, PDO makes the process easy. You only 
have to change the connection string and a few queries. With MySQLi, you will need to rewrite the 
entire code - queries included.

Both are object-oriented, but MySQLi also offers a procedural API.

Both support Prepared Statements. Prepared Statements protect from SQL injection, and are very important 
for web application security.

In this, and in the following chapters we demonstrate three ways of working with PHP and MySQL:
#   MySQLi (object-oriented)
#   MySQLi (procedural)
#   PDO


NOTE: STARTS:

I was working in normal directory. I have obviuosly PHP (v8.0.8) which by default comes with the MySQL, 
MySQLi; I have configured my php.ini file with PDO already.
I also use XAMPP which handles all my MySQP-Apache for Laravel & CI projects.

As I was running my php scripts from vs code>php server my MySQL queries was not working.

I realised and started scripting inside my xampp/htdocs/core_php/, created a basic file, rewrote the script
there and voila! my connection was established.

From now on, I'll update my code in here, but work inside the xampp/htdocs/core_php/.

NOTE: ENDS



MySQLi Installation::
For Linux and Windows: The MySQLi extension is automatically installed in most cases, when php5 mysql 
package is installed.
For installation details, go to SOURCE: http://php.net/manual/en/mysqli.installation.php

PDO Installation::
For installation details, go to SOURCE: http://php.net/manual/en/pdo.installation.php


NOTE:  
    if you have installed your php server, then configure the php.ini file from the php directory
    all the esential configurations for mysqli & pdo's can be done from there
    DON'T NEED TO INSTALL SEPERATELY as everything comes by default.


Open Connection to MySQL:
#   declare variables
        $servername = "localhost";
        $username = "<enter-username-of-your-environment>";
        $password = "<enter-a-passe=word>";
#   MySQLi oop
        $conn = new mysqli($servername, $username, $password);
        if ($conn->connect_error) {
            die("Connection failed: " . $conn->connect_error);
        }
        echo "Connected successfully";
#   MySQLi procedural
        $conn = mysqli_connect($servername, $username, $password);
        if (!$conn) {
            die("Connection failed: " . mysqli_connect_error());
        }
        echo "Connected successfully";
#   PDO
        try {
            $conn = new PDO("mysql:host=$servername;dbname=test", $username, $password);
            // set the PDO error mode to exception
            $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            echo "Connected successfully";
        } catch(PDOException $e) {
            echo "Connection failed: " . $e->getMessage();
        }

    NOTE: 
        In the PDO example above we have also specified a database (myDB). PDO require a valid database 
        to connect to. If no database is specified, an exception is thrown.

    REVIEW: 
        A great benefit of PDO is that it has an exception class to handle any problems that may occur 
        in our database queries. If an exception is thrown within the try{ } block, the script stops executing 
        and flows directly to the first catch(){ } block.

Closing Connection
#   MySQLi oop
        $conn->close();
#   MySQLi procedural
        mysqli_close($conn);
#   PDO
        $conn = null;


Create Database::
NOTE: 
    When you create a new database, you must only specify the first three arguments to the mysqli object 
    (servername, username and password).

REVIEW: 
    If you have to use a specific port, add an empty string for the database-name argument, like this: new mysqli("localhost", "username", "password", "", port)
#   have the variables
        $servername = "localhost";
        $username = "<enter-username-of-your-environment>";
        $password = "<enter-a-passe=word>";
#   mysqli oop
        $sql = "CREATE DATABASE myDB";
        if ($conn->query($sql) === TRUE) {
            echo "Database created successfully";
        } else {
            echo "Error creating database: " . $conn->error;
        }
        $conn->close();
#   mysqli procedural
        $sql = "CREATE DATABASE myDB";
        if (mysqli_query($conn, $sql)) {
            echo "Database created successfully";
        } else {
            echo "Error creating database: " . mysqli_error($conn);
        }
#   pdo
        try {
            $conn = new PDO("mysql:host=$servername", $username, $password);
            // set the PDO error mode to exception
            $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
            $sql = "CREATE DATABASE mydbpdo";
            // use exec() because no results are returned
            $conn->exec($sql);
            echo "Database created successfully<br>";
        } catch(PDOException $e) {
            echo $sql . "<br>" . $e->getMessage();
        }
    Tip: 
        A great benefit of PDO is that it has exception class to handle any problems that may occur in 
        database queries. If an exception is thrown within the try{ } block, the script stops executing 
        and flows directly to the first catch(){ } block. In the catch block above we echo the SQL statement 
        and the generated error message.


Create a MySQL Table Using MySQLi and PDO::
The CREATE TABLE statement is used to create a table in MySQL.

We will create a table named "MyGuests", with five columns: "id", "firstname", "lastname", "email" and 
"reg_date":
    CREATE TABLE MyGuests (
        id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
        firstname VARCHAR(30) NOT NULL,
        lastname VARCHAR(30) NOT NULL,
        email VARCHAR(50),
        reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
    )

The data type specifies what type of data the column can hold. For a complete reference of all the available 
data types, go to our Data Types reference.

After the data type, you can specify other optional attributes for each column:
#   NOT NULL - Each row must contain a value for that column, null values are not allowed
#   DEFAULT value - Set a default value that is added when no other value is passed
#   UNSIGNED - Used for number types, limits the stored data to positive numbers and zero
#   AUTO INCREMENT - MySQL automatically increases the value of the field by 1 each time a new record is 
                     added
#   PRIMARY KEY - Used to uniquely identify the rows in a table. The column with PRIMARY KEY setting is often 
                  an ID number, and is often used with AUTO_INCREMENT

Each table should have a primary key column (in this case: the "id" column). Its value must be unique for 
each record in the table.

create tables
#   variables
        $servername = "localhost";
        $username = "<enter-username-of-your-environment>";
        $password = "<enter-a-passe=word>";
        $dbname = "<respective-dbname>";
#   create connection with db name now
        same as before with $dbname sent as parameter now to access the DB
#   mysqli oop
        $sql = "CREATE TABLE MyGuests (
            id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            firstname VARCHAR(30) NOT NULL,
            lastname VARCHAR(30) NOT NULL,
            email VARCHAR(50),
            reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        )";

        if ($conn->query($sql) === TRUE) {
            echo "Table MyGuests created successfully";
        } else {
            echo "Error creating table: " . $conn->error;
        }
#   mysqli procedural
        $sql = "CREATE TABLE MyGuests (
            id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
            firstname VARCHAR(30) NOT NULL,
            lastname VARCHAR(30) NOT NULL,
            email VARCHAR(50),
            reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
        )";
            
        if (mysqli_query($conn, $sql)) {
            echo "Table MyGuests created successfully";
        } else {
            echo "Error creating table: " . mysqli_error($conn);
        }
#   PDO
        try {
            // $conn = new PDO("mysql:host=$servername", $username, $password);
            $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
            // set the PDO error mode to exception
            $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

            // $sql = "CREATE DATABASE mydbpdo";

            // sql to create table
            $sql = "CREATE TABLE MyGuests (
                id INT(6) UNSIGNED AUTO_INCREMENT PRIMARY KEY,
                firstname VARCHAR(30) NOT NULL,
                lastname VARCHAR(30) NOT NULL,
                email VARCHAR(50),
                reg_date TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            )";

            // use exec() because no results are returned
            $conn->exec($sql);
            // echo "Database created successfully<br>";
            echo "Table MyGuests created successfully";
        } catch(PDOException $e) {
            echo $sql . "<br>" . $e->getMessage();
        }



Insert Data Into MySQL Using MySQLi and PDO::
After a database and a table have been created, we can start adding data in them.

Here are some syntax rules to follow:
#   The SQL query must be quoted in PHP
#   String values inside the SQL query must be quoted
#   Numeric values must not be quoted
#   The word NULL must not be quoted
#   The INSERT INTO statement is used to add new records to a MySQL table:
        INSERT INTO table_name (column1, column2, column3,...)
        VALUES (value1, value2, value3,...)

we created an empty table named "MyGuests" with five columns: "id", "firstname", "lastname", "email" and 
"reg_date". Now, let us fill the table with data.

Note: If a column is AUTO_INCREMENT (like the "id" column) or TIMESTAMP with default update of current_timesamp 
(like the "reg_date" column), it is no need to be specified in the SQL query; MySQL will automatically add the 
value.

Insert
#   vars 
#   connection with db var 
#   mysqli oop
        $sql = "INSERT INTO MyGuests (firstname, lastname, email)
        VALUES ('John', 'Doe', 'john@example.com')";

        if ($conn->query($sql) === TRUE) {
            // echo "Table MyGuests created successfully";
            echo "New record created successfully";
        } else {
            // echo "Error creating table: " . $conn->error;
            echo "Error: " . $sql . "<br>" . $conn->error;
        }
#   mysqli procedural
        $sql = "INSERT INTO MyGuests (firstname, lastname, email)
        VALUES ('John', 'Doe', 'john@example.com')";
            
        if (mysqli_query($conn, $sql)) {
            // echo "Table MyGuests created successfully";
            echo "New record created successfully";
        } else {
            // echo "Error creating table: " . mysqli_error($conn);
            echo "Error: " . $sql . "<br>" . mysqli_error($conn);
        }
#   PDO
        try {
            // $conn = new PDO("mysql:host=$servername", $username, $password);
            $conn = new PDO("mysql:host=$servername;dbname=$dbname", $username, $password);
            // set the PDO error mode to exception
            $conn->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);

            // sql to insert data
            $sql = "INSERT INTO MyGuests (firstname, lastname, email)
            VALUES ('John', 'Doe', 'john@example.com')";    

            // use exec() because no results are returned
            $conn->exec($sql);
            echo "New record created successfully";
        } catch(PDOException $e) {
            echo $sql . "<br>" . $e->getMessage();
        }


Last inserted id::

mysqli oop
    $last_id = $conn->insert_id;
mysqli procedural
    $last_id = mysqli_insert_id($conn);
pdo
    $last_id = $conn->insert_id;


Insert Multipe Data to table::
oop
    $sql = "INSERT INTO MyGuests (firstname, lastname, email)
    VALUES ('John', 'Doe', 'john@example.com');";
    $sql .= "INSERT INTO MyGuests (firstname, lastname, email)
    VALUES ('Mary', 'Moe', 'mary@example.com');";
    $sql .= "INSERT INTO MyGuests (firstname, lastname, email)
    VALUES ('Julie', 'Dooley', 'julie@example.com')";

    if ($conn->multi_query($sql) === TRUE) {
        echo "New records created successfully";
    } else {
        echo "Error: " . $sql . "<br>" . $conn->error;
    }
procedural
    $sql = "INSERT INTO MyGuests (firstname, lastname, email)
    VALUES ('John', 'Doe', 'john@example.com');";
    $sql .= "INSERT INTO MyGuests (firstname, lastname, email)
    VALUES ('Mary', 'Moe', 'mary@example.com');";
    $sql .= "INSERT INTO MyGuests (firstname, lastname, email)
    VALUES ('Julie', 'Dooley', 'julie@example.com')";

    if (mysqli_multi_query($conn, $sql)) {
        echo "New records created successfully";
    } else {
        echo "Error: " . $sql . "<br>" . mysqli_error($conn);
    }
pdo
    // begin the transaction
    $conn->beginTransaction();
    // our SQL statements
    $conn->exec("INSERT INTO MyGuests (firstname, lastname, email)
    VALUES ('John', 'Doe', 'john@example.com')");
    $conn->exec("INSERT INTO MyGuests (firstname, lastname, email)
    VALUES ('Mary', 'Moe', 'mary@example.com')");
    $conn->exec("INSERT INTO MyGuests (firstname, lastname, email)
    VALUES ('Julie', 'Dooley', 'julie@example.com')");

    // commit the transaction
    $conn->commit();
    echo "New records created successfully";




Prepared Statements and Bound Parameters::
A prepared statement is a feature used to execute the same (or similar) SQL statements repeatedly with 
high efficiency.

Prepared statements basically work like this:
1.  Prepare: An SQL statement template is created and sent to the database. Certain values are left 
    unspecified, called parameters (labeled "?"). Example: INSERT INTO MyGuests VALUES(?, ?, ?)
2.  The database parses, compiles, and performs query optimization on the SQL statement template, and stores 
    the result without executing it
3.  Execute: At a later time, the application binds the values to the parameters, and the database executes 
    the statement. The application may execute the statement as many times as it wants with different values

Compared to executing SQL statements directly, prepared statements have three main advantages:
#   Prepared statements reduce parsing time as the preparation on the query is done only once (although the 
    statement is executed multiple times)
#   Bound parameters minimize bandwidth to the server as you need send only the parameters each time, and 
    not the whole query
#   Prepared statements are very useful against SQL injections, because parameter values, which are transmitted 
    later using a different protocol, need not be correctly escaped. If the original statement template is not 
    derived from external input, SQL injection cannot occur.

MySQLi:
    see the "prepare_mysqli.php" file.
    EXPLAIN:

        "INSERT INTO MyGuests (firstname, lastname, email) VALUES (?, ?, ?)"
    In our SQL, we insert a question mark (?) where we want to substitute in an integer, string, double or 
    blob value.

    Then, have a look at the bind_param() function:
        $stmt->bind_param("sss", $firstname, $lastname, $email);
    This function binds the parameters to the SQL query and tells the database what the parameters are. 
    The "sss" argument lists the types of data that the parameters are. The s character tells mysql that 
    the parameter is a string.

    The argument may be one of four types:
        i - integer
        d - double
        s - string
        b - BLOB
    We must have one of these for each parameter.

    By telling mysql what type of data to expect, we minimize the risk of SQL injections.

    NOTE: 
        If we want to insert any data from external sources (like user input), it is very important 
        that the data is sanitized and validated.

PDO:
    see the "prepared_pdo.php" file.



Select Data From a MySQL Database::

The SELECT statement is used to select data from one or more tables:
    SELECT column_name(s) FROM table_name
or we can use the * character to select ALL columns from a table:
    SELECT * FROM table_name

SOURCE: https://www.w3schools.com/php/php_mysql_select.asp



Select and Filter Data From a MySQL Database::

The WHERE clause is used to filter records.
The WHERE clause is used to extract only those records that fulfill a specified condition.
    SELECT column_name(s) FROM table_name WHERE column_name operator value 

MySQLi oop:
    First, we set up the SQL query that selects the id, firstname and lastname columns from the MyGuests 
    table where the lastname is "Doe". The next line of code runs the query and puts the resulting data 
    into a variable called $result.

    Then, the function num_rows() checks if there are more than zero rows returned.

    If there are more than zero rows returned, the function fetch_assoc() puts all the results into an 
    associative array that we can loop through. The while() loop loops through the result set and outputs 
    the data from the id, firstname and lastname columns.

MySQLi procedural:
    same as oops

PDO with Prepared data & display inside the html table:
    see "where_pdo.php".



Select and Order Data From a MySQL Database::

The ORDER BY clause is used to sort the result-set in ascending or descending order.
The ORDER BY clause sorts the records in ascending order by default. To sort the records in descending order, 
use the DESC keyword.
    SELECT column_name(s) FROM table_name ORDER BY column_name(s) ASC|DESC 

STEPS:
#   First, we set up the SQL query that selects the id, firstname and lastname columns from the MyGuests 
    table. The records will be ordered by the lastname column. The next line of code runs the query and puts 
    the resulting data into a variable called $result.

#   Then, the function num_rows() checks if there are more than zero rows returned.

#   If there are more than zero rows returned, the function fetch_assoc() puts all the results into an 
    associative array that we can loop through. The while() loop loops through the result set and outputs 
    the data from the id, firstname and lastname columns.



Delete Data From a MySQL Table Using MySQLi and PDO::
The DELETE statement is used to delete records from a table:
    DELETE FROM table_name
    WHERE some_column = some_value
NOTE: 
    the WHERE clause in the DELETE syntax: The WHERE clause specifies which record or records that should 
    be deleted. If you omit the WHERE clause, all records will be deleted!


Update Data In a MySQL Table Using MySQLi and PDO::
The UPDATE statement is used to update existing records in a table:
    UPDATE table_name
    SET column1=value, column2=value2,...
    WHERE some_column=some_value 
NOTE: 
    the WHERE clause in the UPDATE syntax: The WHERE clause specifies which record or records that should 
    be updated. If you omit the WHERE clause, all records will be updated!


Limit Data Selections From a MySQL Database::

MySQL provides a LIMIT clause that is used to specify the number of records to return.
The LIMIT clause makes it easy to code multi page results or pagination with SQL, and is very useful on large 
tables. Returning a large number of records can impact on performance.

Assume we wish to select all records from 1 - 30 (inclusive) from a table called "Orders". The SQL query would 
then look like this:
    $sql = "SELECT * FROM Orders LIMIT 30";
When the SQL query above is run, it will return the first 30 records.

What if we want to select records 16 - 25 (inclusive)?
Mysql also provides a way to handle this: by using OFFSET.
The SQL query below says "return only 10 records, start on record 16 (OFFSET 15)":
    $sql = "SELECT * FROM Orders LIMIT 10 OFFSET 15";

You could also use a shorter syntax to achieve the same result:
    $sql = "SELECT * FROM Orders LIMIT 15, 10";

Notice that the numbers are reversed when you use a comma.